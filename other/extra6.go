package other

/*
	1、第一步， 我从牌顶拿出一张牌， 放到桌子上。
	2、第二步， 我从牌顶再拿一张牌， 放在手上牌的底部。
	3、第三步， 重复第一步、第二步的操作， 直到我手中所有的牌都放到了桌子上。

	这道题的思路是 倒着操作来一遍
*/

// 这里我们以 res[len(res)-1] 作为牌顶，因为go 切面在头部加元素不方便,所以最后结果在反转就是答案的顺序
// 假如原始顺序是1,2,3,4,5,6,7,8,9,10
// 1                              2,3,4,5,6,7,8,9,10
// 1 3                            4,5,6,7,8,9,10,2
// 1 3 5                          6,7,8,9,10,2,4
// 1 3 5 7                        8,9,10,2,4,6
// 1 3 5 7 9                      10,2,4,6,8
// 1 3 5 7 9 2                    4,6,8,10
// 1 3 5 7 9 2 6                  8,10,4
// 1 3 5 7 9 2 6 10               4,8
// 1 3 5 7 9 2 6 10 8 4

// 倒着来一遍
// 1 3 5 7 9 2 6 10 8             4
// 1 3 5 7 9 2 6 10               8,4
// 1 3 5 7 9 2 6                  10,4,8
// 1 3 5 7 9 2                    6,8,10,4
// 1 3 5 7 9                      2,4,6,8,10
// 1 3 5 7                        9,10,2,4,6,8
// 1 3 5                          7,8,9,10,2,4,6
// 1 3                            5,6,7,8,9,10,2,4
// 1                              3,4,5,6,7,8,9,10,2
//                                1,2,3,4,5,6,7,8,9,10
func findCardLocation(nums []int) []int {
	if len(nums) == 0 {
		return nil
	}
	res := make([]int, 0)
	for i := len(nums) - 1; i >= 0; i-- {
		if len(res) > 0 {
			num := res[0]
			res = res[1:]
			res = append(res, num)
		}
		res = append(res, nums[i])
	}
	reverse3(res)
	return res
}
